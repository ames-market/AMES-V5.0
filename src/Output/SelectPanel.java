

/*
 * SelectPanel.java
 *
 * Created on 2007 3 11, 8:20
 */

package Output;

import AMESGUIFrame.AMESFrame;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.colorchooser.*;
import javax.swing.JOptionPane;
import javax.swing.JFormattedTextField;

import AMESGUIFrame.*;

public class SelectPanel extends javax.swing.JPanel {
    
    /** Creates new form SelectPanel 
     * @param frame 
     * @param ifTableView 
     * @param view 
     * @param pFrame 
     */
    public SelectPanel(AMESFrame frame,boolean ifTableView, TableView view, SplitChart pFrame) {
        amesFrame=frame;
        ifDisplayTable=ifTableView;
        parentFrame=pFrame;
        tableView=(TableView)view;
        
        backgroundColor=new Color(255,255,255);
        gridLineColor=Color.PINK;
        
        dataTypeSelect="Grid Branches";
        outputDataTypeSelect="GenCo Commitments (Benchmark)";
        outputTimeTypeSelect="Entire Run (Selected Hour)";
        iStartTime=1;
        iEndTime=1;
        iDayHour=0;
        iMaxTime=amesFrame.getAMESMarket().getLMPByDay().size();

        initComponents();

        startTimeTextField.setText(String.valueOf(iStartTime));
        endTimeTextField.setText(String.valueOf(iEndTime));
        maxTimeDisplay.setText(String.valueOf(iMaxTime));
        
        updateDataNameList();
        updateOutputDataNameList( );
       
        if(ifDisplayTable){
            dataTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Grid Branches", "GenCos", "LSE Fixed Demand", "LSE Price-Sensitive Demand Function", "Initial Random Seed Value", "Stopping Rule" }));
            outputDataTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "GenCo Commitments (Benchmark)", "GenCo Profits & Net Earnings (Benchmark)", "LSE Price-Sensitive Demand (Benchmark)", "LSE Price-Sens. Net Earnings (Benchmark)", "LMPs (Benchmark)", "GenCo Reported Supply Offers", "GenCo Commitments", "GenCo Profits and Net Earnings", "LSE Price-Sensitive Net Earnings", "LSE Price-Sensitive Demand", "Branch Power Flows", "LMPs" }));

            jLayeredPane3.setVisible(false);
        }
        else{
            dataTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Grid Branches", "GenCos", "LSE Fixed Demand"}));
            outputDataTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "GenCo Commitments (Benchmark)", "GenCo Profits (Benchmark)","GenCo Net Earnings (Benchmark)", "LSE Price-Sensitive Demand (Benchmark)", "LSE Price-Sens. Net Earnings (Benchmark)", "LMPs (Benchmark)", "Total Supply&Demand (Benchmark)", "GenCo Reported Supply Offers", "GenCo Commitments", "GenCo Profits", "GenCo Net Earnings", "LSE Price-Sensitive Net Earnings", "Total Reported Supply & Demand", "LSE Price-Sensitive Demand", "Branch Power Flows", "LMPs","RealTimeLMPS" }));

         }
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButton1 = new javax.swing.JRadioButton();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        dataTypeComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        displayButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        dataNameList = new javax.swing.JList();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        outputDataTypeComboBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        maxTimeLabel = new javax.swing.JLabel();
        outputTimeComboBox = new javax.swing.JComboBox();
        startTimeTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        maxTimeDisplay = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        endTimeTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        outputDataNameList = new javax.swing.JList();
        outputDisplayButton = new javax.swing.JButton();
        dayHourComboBox = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jLayeredPane3 = new javax.swing.JLayeredPane();
        backgroundColorButton = new javax.swing.JButton();
        gridLineButton = new javax.swing.JButton();

        jRadioButton1.setText("jRadioButton1");
        jRadioButton1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jRadioButton1.setMargin(new java.awt.Insets(0, 0, 0, 0));

        jLayeredPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), "View Case Data Parameters", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 12), new java.awt.Color(0, 0, 0)));

        dataTypeComboBox.setFont(new java.awt.Font("Arial", 0, 12));
        dataTypeComboBox.setMaximumRowCount(100);
        dataTypeComboBox.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        dataTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataTypeComboBoxActionPerformed(evt);
            }
        });
        dataTypeComboBox.setBounds(150, 20, 250, 23);
        jLayeredPane1.add(dataTypeComboBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 12));
        jLabel2.setText("Breadth of  Data:");
        jLabel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel2.setBounds(10, 50, 110, 20);
        jLayeredPane1.add(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel1.setFont(new java.awt.Font("Arial", 0, 12));
        jLabel1.setText("Choose Data Type:");
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setBounds(10, 20, 110, 20);
        jLayeredPane1.add(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        displayButton.setFont(new java.awt.Font("Arial", 0, 12));
        displayButton.setText("Display");
        displayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayButtonActionPerformed(evt);
            }
        });
        displayButton.setBounds(10, 130, 110, 23);
        jLayeredPane1.add(displayButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        dataNameList.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        dataNameList.setFont(new java.awt.Font("Arial", 0, 12));
        dataNameList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "All Items", "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(dataNameList);

        jScrollPane1.setBounds(150, 50, 250, 110);
        jLayeredPane1.add(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), "Select Output for Display", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12), new java.awt.Color(0, 0, 0)));

        outputDataTypeComboBox.setFont(new java.awt.Font("Arial", 0, 12));
        outputDataTypeComboBox.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        outputDataTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputDataTypeComboBoxActionPerformed(evt);
            }
        });
        outputDataTypeComboBox.setBounds(140, 20, 280, 23);
        jLayeredPane2.add(outputDataTypeComboBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel3.setFont(new java.awt.Font("Arial", 0, 12));
        jLabel3.setText("Choose Data Type:");
        jLabel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel3.setBounds(10, 20, 120, 20);
        jLayeredPane2.add(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel4.setFont(new java.awt.Font("Arial", 0, 12));
        jLabel4.setText("Choose Time:");
        jLabel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel4.setBounds(10, 50, 120, 20);
        jLayeredPane2.add(jLabel4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        maxTimeLabel.setFont(new java.awt.Font("Arial", 0, 12));
        maxTimeLabel.setText("Possible Day Range:");
        maxTimeLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        maxTimeLabel.setBounds(10, 80, 120, 20);
        jLayeredPane2.add(maxTimeLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        outputTimeComboBox.setFont(new java.awt.Font("Arial", 0, 12));
        outputTimeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Entire Run (Selected Hour)", "Start to End Day (Selected Hour)", "Entire Run (All Hours)", "Start to End Day (All Hours)" }));
        outputTimeComboBox.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        outputTimeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputTimeComboBoxActionPerformed(evt);
            }
        });
        outputTimeComboBox.setBounds(140, 50, 280, 23);
        jLayeredPane2.add(outputTimeComboBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        startTimeTextField.setFont(new java.awt.Font("Arial", 0, 12));
        startTimeTextField.setText("Start Day");
        startTimeTextField.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        startTimeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startTimeTextFieldActionPerformed(evt);
            }
        });
        startTimeTextField.setBounds(140, 110, 250, 20);
        jLayeredPane2.add(startTimeTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel5.setFont(new java.awt.Font("Arial", 0, 12));
        jLabel5.setText("Start Day for Display:");
        jLabel5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel5.setBounds(10, 110, 120, 20);
        jLayeredPane2.add(jLabel5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        maxTimeDisplay.setFont(new java.awt.Font("Arial", 0, 12));
        maxTimeDisplay.setText("Max Time");
        maxTimeDisplay.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        maxTimeDisplay.setBounds(140, 80, 250, 20);
        jLayeredPane2.add(maxTimeDisplay, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel6.setFont(new java.awt.Font("Arial", 0, 12));
        jLabel6.setText("End Day for Display:");
        jLabel6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel6.setBounds(10, 140, 120, 19);
        jLayeredPane2.add(jLabel6, javax.swing.JLayeredPane.DEFAULT_LAYER);

        endTimeTextField.setFont(new java.awt.Font("Arial", 0, 12));
        endTimeTextField.setText("End Time");
        endTimeTextField.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        endTimeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endTimeTextFieldActionPerformed(evt);
            }
        });
        endTimeTextField.setBounds(140, 140, 250, 20);
        jLayeredPane2.add(endTimeTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel7.setFont(new java.awt.Font("Arial", 0, 12));
        jLabel7.setText("Breadth of Data:");
        jLabel7.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel7.setBounds(10, 200, 120, 20);
        jLayeredPane2.add(jLabel7, javax.swing.JLayeredPane.DEFAULT_LAYER);

        outputDataNameList.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        outputDataNameList.setFont(new java.awt.Font("Arial", 0, 12));
        outputDataNameList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "All Items", "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(outputDataNameList);

        jScrollPane2.setBounds(140, 200, 250, 120);
        jLayeredPane2.add(jScrollPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        outputDisplayButton.setFont(new java.awt.Font("Arial", 0, 12));
        outputDisplayButton.setText("Display");
        outputDisplayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputDisplayButtonActionPerformed(evt);
            }
        });
        outputDisplayButton.setBounds(10, 270, 110, 23);
        jLayeredPane2.add(outputDisplayButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        dayHourComboBox.setFont(new java.awt.Font("Arial", 0, 12));
        dayHourComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0:00", "1:00", "2:00", "3:00", "4:00", "5:00", "6:00", "7:00", "8:00", "9:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00", "19:00", "20:00", "21:00", "22:00", "23:00" }));
        dayHourComboBox.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        dayHourComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dayHourComboBoxActionPerformed(evt);
            }
        });
        dayHourComboBox.setBounds(140, 170, 250, 23);
        jLayeredPane2.add(dayHourComboBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel8.setFont(new java.awt.Font("Arial", 0, 12));
        jLabel8.setText("Hour for Display:");
        jLabel8.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel8.setBounds(10, 170, 120, 19);
        jLayeredPane2.add(jLabel8, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), "Chart Settings", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12), new java.awt.Color(0, 0, 0)));

        backgroundColorButton.setFont(new java.awt.Font("Arial", 0, 12));
        backgroundColorButton.setText("Background Color");
        backgroundColorButton.setDefaultCapable(false);
        backgroundColorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backgroundColorButtonActionPerformed(evt);
            }
        });
        backgroundColorButton.setBounds(230, 30, 140, 23);
        jLayeredPane3.add(backgroundColorButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        gridLineButton.setFont(new java.awt.Font("Arial", 0, 12));
        gridLineButton.setText("Grid Line Color");
        gridLineButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        gridLineButton.setBorderPainted(false);
        gridLineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gridLineButtonActionPerformed(evt);
            }
        });
        gridLineButton.setBounds(50, 30, 130, 23);
        jLayeredPane3.add(gridLineButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)
            .addComponent(jLayeredPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)
            .addComponent(jLayeredPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLayeredPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(jLayeredPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void dayHourComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dayHourComboBoxActionPerformed
       iDayHour=dayHourComboBox.getSelectedIndex();
    }//GEN-LAST:event_dayHourComboBoxActionPerformed

    private void outputDisplayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputDisplayButtonActionPerformed
        if(!VerifyStartTime().isEmpty())
            return;
        
        if(!VerifyEndTime().isEmpty())
            return;
        
        int [] selectIndex=outputDataNameList.getSelectedIndices();
       
        if(ifDisplayTable) {
            if(outputDataTypeSelect.equalsIgnoreCase("GenCo Commitments (Benchmark)")) {
                   tableView.displayGeneratorCommitmentWithTrueCostData(outputTimeTypeSelect, iStartTime, iEndTime, iDayHour, selectIndex);
             }
            else if(outputDataTypeSelect.equalsIgnoreCase("GenCo Profits & Net Earnings (Benchmark)")) {
                   tableView.displayGeneratorProfitWithTrueCostData(outputTimeTypeSelect, iStartTime, iEndTime, iDayHour, selectIndex);
             }
            else if(outputDataTypeSelect.equalsIgnoreCase("LSE Price-Sensitive Demand (Benchmark)")) {
                   tableView.displayPSDemandDispatchWithTrueCostData(outputTimeTypeSelect, iStartTime, iEndTime, iDayHour, selectIndex);
             }
            else if(outputDataTypeSelect.equalsIgnoreCase("LSE Price-Sens. Net Earnings (Benchmark)")) {
                   tableView.displayLSESurplusWithTrueCostData(outputTimeTypeSelect, iStartTime, iEndTime, iDayHour, selectIndex);
             }
            else if(outputDataTypeSelect.equalsIgnoreCase("LMPs (Benchmark)")) {
                   tableView.displayNodeLMPWithTrueCostData(outputTimeTypeSelect, iStartTime, iEndTime, iDayHour, selectIndex);
             }
            else if(outputDataTypeSelect.equalsIgnoreCase("GenCo Reported Supply Offers")) {
                   tableView.displayGeneratorSupplyOfferData(outputTimeTypeSelect, iStartTime, iEndTime, selectIndex);
             }
            else  if(outputDataTypeSelect.equalsIgnoreCase("GenCo Commitments")) {
                tableView.displayGeneratorCommitmentData(outputTimeTypeSelect, iStartTime, iEndTime, iDayHour, selectIndex);
            }
            else  if(outputDataTypeSelect.equalsIgnoreCase("GenCo Profits and Net Earnings")) {
                tableView.displayGeneratorProfitAndNetEarningsData(outputTimeTypeSelect, iStartTime, iEndTime, selectIndex);
            }
            else  if(outputDataTypeSelect.equalsIgnoreCase("LSE Price-Sensitive Net Earnings")) {
                tableView.displayLSESurplusData(outputTimeTypeSelect, iStartTime, iEndTime, selectIndex);
            }
            else  if(outputDataTypeSelect.equalsIgnoreCase("LSE Price-Sensitive Demand")) {
                tableView.displayLSEPriceSensitiveDemandData(outputTimeTypeSelect, iStartTime, iEndTime, iDayHour, selectIndex);
            }
            else  if(outputDataTypeSelect.equalsIgnoreCase("Branch Power Flows")) {
                tableView.displayBranchPowerFlowData(outputTimeTypeSelect, iStartTime, iEndTime, iDayHour, selectIndex);
            }
            else  if(outputDataTypeSelect.equalsIgnoreCase("LMPs")) {
                tableView.displayNodeLMPData(outputTimeTypeSelect, iStartTime, iEndTime, iDayHour, selectIndex);
            }
       }
       else {
            if(outputDataTypeSelect.equalsIgnoreCase("GenCo Commitments (Benchmark)")) {
                parentFrame.drawGeneratorCommitmentWithTrueCostData(outputTimeTypeSelect, iStartTime, iEndTime, iDayHour, selectIndex);
             }
            else if(outputDataTypeSelect.equalsIgnoreCase("GenCo Profits (Benchmark)")) {
                parentFrame.drawGeneratorProfitWithTrueCostData(outputTimeTypeSelect, iStartTime, iEndTime, iDayHour, selectIndex, true);
             }
            else if(outputDataTypeSelect.equalsIgnoreCase("GenCo Net Earnings (Benchmark)")) {
                parentFrame.drawGeneratorProfitWithTrueCostData(outputTimeTypeSelect, iStartTime, iEndTime, iDayHour, selectIndex, false);
             }
            else if(outputDataTypeSelect.equalsIgnoreCase("LSE Price-Sensitive Demand (Benchmark)")) {
                parentFrame.drawPSDemandDispatchWithTrueCostData(outputTimeTypeSelect, iStartTime, iEndTime, iDayHour, selectIndex);
             }
            else if(outputDataTypeSelect.equalsIgnoreCase("LSE Price-Sens. Net Earnings (Benchmark)")) {
                parentFrame.drawLSESurplusWithTrueCostData(outputTimeTypeSelect, iStartTime, iEndTime, iDayHour, selectIndex);
             }
            else if(outputDataTypeSelect.equalsIgnoreCase("LMPs (Benchmark)")) {
                parentFrame.drawNodeLMPWithTrueCostData(outputTimeTypeSelect, iStartTime, iEndTime, iDayHour, selectIndex);
             }
            else if(outputDataTypeSelect.equalsIgnoreCase("Total Supply&Demand (Benchmark)")) {
                   parentFrame.drawAggreagtedSupplyAndDemandWithTrueCostData(outputTimeTypeSelect, iStartTime, iEndTime, iDayHour, selectIndex);
             }
            else if(outputDataTypeSelect.equalsIgnoreCase("GenCo Reported Supply Offers")) {
                   parentFrame.drawGeneratorSupplyOfferData(outputTimeTypeSelect, iStartTime, iEndTime, selectIndex);
             }
            else  if(outputDataTypeSelect.equalsIgnoreCase("GenCo Commitments")) {
                parentFrame.drawGeneratorCommitmentData(outputTimeTypeSelect, iStartTime, iEndTime, iDayHour, selectIndex);
            }
             else  if(outputDataTypeSelect.equalsIgnoreCase("GenCo Profits")) {
                parentFrame.drawGeneratorProfitAndNetEarningsData(outputTimeTypeSelect, iStartTime, iEndTime, selectIndex, true);
            }
             else  if(outputDataTypeSelect.equalsIgnoreCase("GenCo Net Earnings")) {
                parentFrame.drawGeneratorProfitAndNetEarningsData(outputTimeTypeSelect, iStartTime, iEndTime, selectIndex, false);
            }
             else  if(outputDataTypeSelect.equalsIgnoreCase("LSE Price-Sensitive Net Earnings")) {
                parentFrame.drawLSESurplusData(outputTimeTypeSelect, iStartTime, iEndTime, selectIndex);
            }
            else if(outputDataTypeSelect.equalsIgnoreCase("Total Reported Supply & Demand")) {
                   parentFrame.drawAggreagtedSupplyAndDemandData(outputTimeTypeSelect, iStartTime, iEndTime, iDayHour, selectIndex);
             }
            else  if(outputDataTypeSelect.equalsIgnoreCase("LSE Price-Sensitive Demand")) {
                parentFrame.drawLSEPriceSensitiveDemandData(outputTimeTypeSelect, iStartTime, iEndTime, iDayHour, selectIndex);
            }
             else  if(outputDataTypeSelect.equalsIgnoreCase("Branch Power Flows")) {
                parentFrame.drawBranchPowerFlowData(outputTimeTypeSelect, iStartTime, iEndTime, iDayHour, selectIndex);
            }
            else  if(outputDataTypeSelect.equalsIgnoreCase("LMPs")) {
                parentFrame.drawNodeLMPData(outputTimeTypeSelect, iStartTime, iEndTime, iDayHour, selectIndex);
            }
     }
    }//GEN-LAST:event_outputDisplayButtonActionPerformed

    public String VerifyEndTime(){
        String strTemp =endTimeTextField.getText();
        int iTemp;
        String message="Please input a integer number!";
        
        if(!endTimeTextField.isEditable())
            return "";
        
        if(outputTimeComboBox.isEnabled()){
            if(outputTimeTypeSelect.equalsIgnoreCase("Entire Run (Selected Hour)")||
                    outputTimeTypeSelect.equalsIgnoreCase("Entire Run (All Hours)"))
                return "";
        }
        
        try {
            iTemp = Integer.parseInt(strTemp);
            
            if(iTemp<iStartTime){
                 message="The EndTime should bigger than StartTime!";
                 JOptionPane.showMessageDialog(this, message, "Error Message", JOptionPane.ERROR_MESSAGE);      
                 return message;
            }
            else if(outputDataTypeSelect.equalsIgnoreCase("Branch Power Flows")||
             outputDataTypeSelect.equalsIgnoreCase("LSE Price-Sensitive Demand")||
             outputDataTypeSelect.equalsIgnoreCase("LMPs")||
             outputDataTypeSelect.equalsIgnoreCase("GenCo Commitments")){
                   if((iTemp<2)||(iTemp>iMaxTime+1)) {
                         JOptionPane.showMessageDialog(this, "The StartTime number should between 2 and "+ (iMaxTime+1), "Error Message", JOptionPane.ERROR_MESSAGE);      
                         return message;
                    }
                    else
                          iEndTime=iTemp;
            }
            else {
                   if((iTemp<1)||(iTemp>iMaxTime)) {
                         JOptionPane.showMessageDialog(this, "The StartTime number should between 1 and "+ iMaxTime, "Error Message", JOptionPane.ERROR_MESSAGE);      
                         return message;
                    }
                    else
                          iEndTime=iTemp;
            }
        }
        catch (NumberFormatException e) {
                 JOptionPane.showMessageDialog(this, message, "Error Message", JOptionPane.ERROR_MESSAGE);      
                 return message;
          }
        
        return "";
    }
    
    private void endTimeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endTimeTextFieldActionPerformed
        VerifyEndTime();
    }//GEN-LAST:event_endTimeTextFieldActionPerformed

    public String VerifyStartTime(){
        String strTemp =startTimeTextField.getText();
        int iTemp;
        String message="Please input a integer number!";
       
        if(!startTimeTextField.isEditable())
            return "";
        
        if(outputTimeComboBox.isEnabled()){
            if(outputTimeTypeSelect.equalsIgnoreCase("Entire Run (Selected Hour)")||
                    outputTimeTypeSelect.equalsIgnoreCase("Entire Run (All Hours)"))
                return "";
        }
        
        try {
            iTemp = Integer.parseInt(strTemp);
            
            if(outputDataTypeSelect.equalsIgnoreCase("Branch Power Flows")||
             outputDataTypeSelect.equalsIgnoreCase("LSE Price-Sensitive Demand")||
             outputDataTypeSelect.equalsIgnoreCase("LMPs")||
             outputDataTypeSelect.equalsIgnoreCase("Total Reported Supply & Demand")||
             outputDataTypeSelect.equalsIgnoreCase("GenCo Commitments")){
                   if((iTemp<2)||(iTemp>iMaxTime+1)) {
                         JOptionPane.showMessageDialog(this, "The StartTime number should between 2 and "+ (iMaxTime+1), "Error Message", JOptionPane.ERROR_MESSAGE);      
                         return message;
                    }
                    else
                          iStartTime=iTemp;
            }
            else {
                   if((iTemp<1)||(iTemp>iMaxTime)) {
                         JOptionPane.showMessageDialog(this, "The StartTime number should between 1 and "+ iMaxTime, "Error Message", JOptionPane.ERROR_MESSAGE);      
                         return message;
                    }
                    else
                          iStartTime=iTemp;
            }

        }
        catch (NumberFormatException e) {
                 JOptionPane.showMessageDialog(this, message, "Error Message", JOptionPane.ERROR_MESSAGE);      
                 return message;
          }
        
        if(outputTimeTypeSelect.equalsIgnoreCase("Entire Run (Selected Hour)")||
                outputTimeTypeSelect.equalsIgnoreCase("Entire Run (All Hours)"))
            return "";
        
         
        return "";
    }    
    private void startTimeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startTimeTextFieldActionPerformed
        VerifyStartTime();
    }//GEN-LAST:event_startTimeTextFieldActionPerformed

    private void outputTimeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputTimeComboBoxActionPerformed
         outputTimeTypeSelect=(String)outputTimeComboBox.getSelectedItem();
    }//GEN-LAST:event_outputTimeComboBoxActionPerformed

    private void outputDataTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputDataTypeComboBoxActionPerformed
         String newSelect=(String)outputDataTypeComboBox.getSelectedItem();
        
         if(!outputDataTypeSelect.equalsIgnoreCase(newSelect)) {
             outputDataTypeSelect=newSelect;
             updateOutputDataNameList();
         }
    }//GEN-LAST:event_outputDataTypeComboBoxActionPerformed

   public void updateOutputDataNameList( ) {
        DefaultListModel listModel = new DefaultListModel();
        listModel.addElement("All Data");

        outputDataNameList.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        startTimeTextField.setEditable(true);
        endTimeTextField.setEditable(true);
        outputTimeComboBox.setEnabled(true);
        dayHourComboBox.setEnabled(true);
        maxTimeDisplay.setText("From Day 1 to Day "+String.valueOf(iMaxTime));
                
        outputTimeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Entire Run (Selected Hour)", "Start to End Day (Selected Hour)", "Entire Run (All Hours)", "Start to End Day (All Hours)"}));
        outputTimeTypeSelect="Entire Run (Selected Hour)";
                
        if(outputDataTypeSelect.equalsIgnoreCase("Branch Power Flows")) {
            maxTimeDisplay.setText("From Day 2 to Day "+String.valueOf(iMaxTime+1));
            
            Object [][] branchData=amesFrame.getBranchData( );

            for(int i=0; i<branchData.length; i++) {
                listModel.addElement((String)branchData[i][0]);
            }
        }
        else if(outputDataTypeSelect.equalsIgnoreCase("LMPs")) {
            maxTimeDisplay.setText("From Day 2 to Day "+String.valueOf(iMaxTime+1));
             
            String [] nodeName=amesFrame.getNodeNameData( );

            for(int i=0; i<nodeName.length; i++) {
                listModel.addElement(nodeName[i]);
            }
        }
        else if(outputDataTypeSelect.equalsIgnoreCase("LSE Price-Sensitive Demand")) {
            maxTimeDisplay.setText("From Day 2 to Day "+String.valueOf(iMaxTime+1));
            
            if(!ifDisplayTable) {
                listModel.removeAllElements();
                outputDataNameList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
             
                outputTimeComboBox.setSelectedItem("Start to End Day (Selected Hour)");
                endTimeTextField.setEditable(false);
                outputTimeComboBox.setEnabled(false);
           }
            
            Object [][] lseData=amesFrame.getLSEData( );

            for(int i=0; i<lseData.length; i++) {
                listModel.addElement((String)lseData[i][0]);
            }
        }
        else if(outputDataTypeSelect.equalsIgnoreCase("LMPs (Benchmark)")) {
             String [] nodeName=amesFrame.getNodeNameData( );

            for(int i=0; i<nodeName.length; i++) {
                listModel.addElement(nodeName[i]);
            }
             
             startTimeTextField.setEditable(false);
             endTimeTextField.setEditable(false);
             outputTimeComboBox.setEnabled(false);
             dayHourComboBox.setEnabled(false);
       }
        else if((outputDataTypeSelect.equalsIgnoreCase("GenCo Commitments (Benchmark)"))
        ||(outputDataTypeSelect.equalsIgnoreCase("GenCo Profits & Net Earnings (Benchmark)"))
        ||(outputDataTypeSelect.equalsIgnoreCase("GenCo Profits (Benchmark)"))
        ||(outputDataTypeSelect.equalsIgnoreCase("GenCo Net Earnings (Benchmark)"))){
             Object [][] genData=amesFrame.getGeneratorData( );

            for(int i=0; i<genData.length; i++) {
                listModel.addElement((String)genData[i][0]);
            }
              
             startTimeTextField.setEditable(false);
             endTimeTextField.setEditable(false);
             outputTimeComboBox.setEnabled(false);
             dayHourComboBox.setEnabled(false);
       }
        else if(outputDataTypeSelect.equalsIgnoreCase("LSE Price-Sensitive Demand (Benchmark)")){
            if(!ifDisplayTable) {
                listModel.removeAllElements();
                outputDataNameList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
             
                outputTimeComboBox.setSelectedItem("Start to End Day (Selected Hour)");
                dayHourComboBox.setEnabled(true);
           }
            else
                dayHourComboBox.setEnabled(false);

            
            Object [][] lseData=amesFrame.getLSEData( );

            for(int i=0; i<lseData.length; i++) {
                listModel.addElement((String)lseData[i][0]);
            }
              
             startTimeTextField.setEditable(false);
             endTimeTextField.setEditable(false);
             outputTimeComboBox.setEnabled(false);
       }
        else if(outputDataTypeSelect.equalsIgnoreCase("LSE Price-Sens. Net Earnings (Benchmark)")){
            dayHourComboBox.setEnabled(false);
            
            Object [][] lseData=amesFrame.getLSEData( );

            for(int i=0; i<lseData.length; i++) {
                listModel.addElement((String)lseData[i][0]);
            }
              
             startTimeTextField.setEditable(false);
             endTimeTextField.setEditable(false);
             outputTimeComboBox.setEnabled(false);
       }
        else if((outputDataTypeSelect.equalsIgnoreCase("Total Supply&Demand (Benchmark)"))
        ||(outputDataTypeSelect.equalsIgnoreCase("Total Reported Supply & Demand"))){
            maxTimeDisplay.setText("From Day 2 to Day "+String.valueOf(iMaxTime+1));
            listModel.removeAllElements();
            endTimeTextField.setEditable(false);
            outputTimeComboBox.setEnabled(false);
       }
        else if(outputDataTypeSelect.equalsIgnoreCase("GenCo Reported Supply Offers")) {
            
            if(!ifDisplayTable) {
                listModel.removeAllElements();
                outputDataNameList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
              
                endTimeTextField.setEditable(false);
                outputTimeComboBox.setEnabled(false);
                dayHourComboBox.setEnabled(false);
           }
            else{
                outputTimeComboBox.removeAllItems();
                outputTimeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Start to End Day", "Entire Run"}));
                outputTimeTypeSelect="Start to End Day";
            }
            
            Object [][] genData=amesFrame.getGeneratorData( );

            for(int i=0; i<genData.length; i++) {
                listModel.addElement((String)genData[i][0]);
            }
              
       }
        else if(outputDataTypeSelect.equalsIgnoreCase("LSE Price-Sensitive Net Earnings")) {
            dayHourComboBox.setEnabled(false);

            outputTimeComboBox.removeAllItems();
            outputTimeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Start to End Day", "Entire Run"}));
            outputTimeTypeSelect="Start to End Day";
            
            Object [][] lseData=amesFrame.getLSEData( );

            for(int i=0; i<lseData.length; i++) {
                listModel.addElement((String)lseData[i][0]);
            }
        }
        else { 
            if(outputDataTypeSelect.equalsIgnoreCase("GenCo Profits and Net Earnings")||
               outputDataTypeSelect.equalsIgnoreCase("GenCo Profits")||
               outputDataTypeSelect.equalsIgnoreCase("GenCo Net Earnings")){
            
                outputTimeComboBox.removeAllItems();
                outputTimeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Start to End Day", "Entire Run"}));
                outputTimeTypeSelect="Start to End Day";
                    
                dayHourComboBox.setEnabled(false);
            }
            
            if(outputDataTypeSelect.equalsIgnoreCase("GenCo Commitments"))
                maxTimeDisplay.setText("From Day 2 to Day "+String.valueOf(iMaxTime+1));
            
             Object [][] genData=amesFrame.getGeneratorData( );

            for(int i=0; i<genData.length; i++) {
                listModel.addElement((String)genData[i][0]);
            }
        }
            
        outputDataNameList.setModel(listModel);
    }
    
    private void gridLineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gridLineButtonActionPerformed
       Color retColor = JColorChooser.showDialog( this, "Choose Chart Grid Line Color", gridLineColor);

       if(retColor!=null) {
            gridLineColor=retColor;
            parentFrame.setGridLineColor(gridLineColor);
       }
    }//GEN-LAST:event_gridLineButtonActionPerformed

    private void backgroundColorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backgroundColorButtonActionPerformed
        Color retColor  = JColorChooser.showDialog( this, "Choose Chart Background Color", backgroundColor);

       if(retColor!=null) {
            backgroundColor=retColor;
            parentFrame.setbackgroundColor(backgroundColor);
       }
    }//GEN-LAST:event_backgroundColorButtonActionPerformed

    private void displayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayButtonActionPerformed
        int [] selectIndex=dataNameList.getSelectedIndices();
       
        if(ifDisplayTable) {
            if(dataTypeSelect.equalsIgnoreCase("Grid Branches")) {
                   tableView.displayGridLinesData(selectIndex);
             }
            else  if(dataTypeSelect.equalsIgnoreCase("GenCos")) {
                tableView.displayGeneratorData(selectIndex);
            }
            else  if(dataTypeSelect.equalsIgnoreCase("LSE Fixed Demand")) {
                tableView.displayLSEFixedDemandData(selectIndex);
            }
            else  if(dataTypeSelect.equalsIgnoreCase("LSE Price-Sensitive Demand Function")) {
                tableView.displayLSEPSDemandData(selectIndex);
            }
            else  if(dataTypeSelect.equalsIgnoreCase("Initial Random Seed Value")) {
                tableView.displayInitialRandomSeedData(selectIndex);
            }
            else  if(dataTypeSelect.equalsIgnoreCase("Stopping Rule")) {
                tableView.displayStoppingRuleData(selectIndex);
            }
       }
       else {
            if(dataTypeSelect.equalsIgnoreCase("Grid Branches")) {
               parentFrame.drawGridLinesData(selectIndex);
             }
            else  if(dataTypeSelect.equalsIgnoreCase("GenCos")) {
                parentFrame.drawGeneratorData(selectIndex);
            }
            else  if(dataTypeSelect.equalsIgnoreCase("LSE Fixed Demand")) {
                parentFrame.drawLSEFixedDemandData(selectIndex);
            }
       }
    }//GEN-LAST:event_displayButtonActionPerformed

    private void dataTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataTypeComboBoxActionPerformed
         String newSelect=(String)dataTypeComboBox.getSelectedItem();
        
         if(!dataTypeSelect.equalsIgnoreCase(newSelect)) {
             dataTypeSelect=newSelect;
             updateDataNameList();
         }
    }//GEN-LAST:event_dataTypeComboBoxActionPerformed
    
    public void updateDataNameList( ) {
        DefaultListModel listModel = new DefaultListModel();
        listModel.addElement("All Data");
    
        if(dataTypeSelect.equalsIgnoreCase("Grid Branches")) {
            Object [][] branchData=amesFrame.getBranchData( );

            for(int i=0; i<branchData.length; i++) {
                listModel.addElement((String)branchData[i][0]);
            }
        }
        else if(dataTypeSelect.equalsIgnoreCase("GenCos")) {
             Object [][] genData=amesFrame.getGeneratorData( );

            for(int i=0; i<genData.length; i++) {
                listModel.addElement((String)genData[i][0]);
            }
        }
        else if(dataTypeSelect.equalsIgnoreCase("LSE Fixed Demand")
                ||dataTypeSelect.equalsIgnoreCase("LSE Price-Sensitive Demand Function")) {
             Object [][] lseData=amesFrame.getLSEData( );

            for(int i=0; i<lseData.length; i++) {
                listModel.addElement((String)lseData[i][0]);
            }
        }
            
        dataNameList.setModel(listModel);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backgroundColorButton;
    private javax.swing.JList dataNameList;
    private javax.swing.JComboBox dataTypeComboBox;
    private javax.swing.JComboBox dayHourComboBox;
    private javax.swing.JButton displayButton;
    private javax.swing.JTextField endTimeTextField;
    private javax.swing.JButton gridLineButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JLayeredPane jLayeredPane3;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel maxTimeDisplay;
    private javax.swing.JLabel maxTimeLabel;
    private javax.swing.JList outputDataNameList;
    private javax.swing.JComboBox outputDataTypeComboBox;
    private javax.swing.JButton outputDisplayButton;
    private javax.swing.JComboBox outputTimeComboBox;
    private javax.swing.JTextField startTimeTextField;
    // End of variables declaration//GEN-END:variables
    
    private AMESFrame amesFrame;
    private TableView tableView;
    private boolean ifDisplayTable;
    private SplitChart parentFrame;
    private String dataTypeSelect;
    private String outputDataTypeSelect;
    private String outputTimeTypeSelect;
    private int iMaxTime;
    private int iStartTime;
    private int iEndTime;
    private int iDayHour;
    
    private JFormattedTextField F1;
    
    private Color backgroundColor;
    private Color gridLineColor;
}
